// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/Berchon/weather-cloud-run/internal/business/model"
)

// MockWeatherService is an autogenerated mock type for the WeatherService type
type MockWeatherService struct {
	mock.Mock
}

// GetWeatherByCity provides a mock function with given fields: ctx, city
func (_m *MockWeatherService) GetWeatherByCity(ctx context.Context, city string) (*float64, *model.CustomError) {
	ret := _m.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherByCity")
	}

	var r0 *float64
	var r1 *model.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, string) (*float64, *model.CustomError)); ok {
		return rf(ctx, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *float64); ok {
		r0 = rf(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *model.CustomError); ok {
		r1 = rf(ctx, city)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.CustomError)
		}
	}

	return r0, r1
}

// NewMockWeatherService creates a new instance of MockWeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherService {
	mock := &MockWeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
